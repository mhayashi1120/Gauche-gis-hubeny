(define-module gis.hubeny
  (use util.match)
  (use gauche.parameter)
  (use math.const)
  (export
   ;; Parameter
   default-geodesic-datum
   )
  (export
   hubeny-distance hubeny-distance*
   hubeny-diff-lat hubeny-diff-lng
   hubeny-lat-limit hubeny-lng-limit
   hubeny-limit hubeny-limit*

   hubeny-lat-range* hubeny-lng-range*
   hubeny-range hubeny-range*
   hubeny-in-rectangle?)
  ;; Deprecating interface
  (export
   ;; Method
   distance-between
   longitude-limit latitude-limit
   longitude-range latitude-range))
(select-module gis.hubeny)

(define (degree->radian deg)
  (* deg pi/180))

(define (radian->degree radian)
  (* radian 180/pi))

;; # TODO:
;; - improve *-range interface. at polar regions

;; http://yamadarake.jp/trdi/report000001.html

;; d = sqrt( (Dy * M)^2 + (Dx * N * cosμy)^2 )

;; d = METER
;; ( x1, y1 ) = location1
;; ( x2, y2 ) = location2
;; Dy = y1 - y2 (diff latitude)
;; Dx = x1 - x2 (diff longitude)
;; μy = ( y1 + y2 ) / 2 (average of latitude)
;; M = (a * ( 1 - e^2 ) ) / W^3
;; N = a / W
;; W = sqrt ( 1 - ( e^2 * (sinμy)^2 ) )
;; e = sqrt ( ( a^2 - b^2 ) / a^2)

;; Transform formula:

;; Dy = ( sqrt ( d^2 - ( Dx * N * cosμy )^2 ) ) / M
;; Dx = sqrt ( ( d^2 - ( Dy * M )^2 ) / ( N * cosμy ))

;; μ =: MU

;; BESSEL / GRS80 / WGS84
(define default-geodesic-datum
  (make-parameter 'WGS84))

(define-constant BESSEL_CONSTANTS
  '@BESSEL_CONSTANTS@)

(define-constant GRS80_CONSTANTS
  '@GRS80_CONSTANTS@)

(define-constant WGS84_CONSTANTS
  '@WGS84_CONSTANTS@)

(define (define-constants type)
  (apply values
         (ecase type
	       ['BESSEL BESSEL_CONSTANTS]
	       ['GRS80 GRS80_CONSTANTS]
	       ['WGS84 WGS84_CONSTANTS])))

(define (compute-ellipse lat)
  ($ compute-ellipse/rad $ degree->radian lat))

(define (compute-ellipse/rad lat/rad)
  (define-values (a e^2 M-num) (define-constants 'WGS84))

  (let* ([MUy lat/rad]
         [sinMUy^2 (expt (sin MUy) 2)]
         [W (sqrt (- 1.0 (* e^2 sinMUy^2)))]
         [M (/ M-num (expt W 3))]
         [N (/ a W)]
         [Ncos (* N (cos MUy))])
    (values M Ncos)))

;; Maybe its enough about polar region.
(define (clamp-lat lat*)
  (assume-type lat* <number>)
  (clamp -90 lat* 90))

(define (clamp-lng lng*)
  (assume-type lng* <number>)
  (- (mod (+ lng* 180) 360) 180))

(define (parse-lat/long s)
  (cond
   [(#/^[\s\t]*([-+]?[0-9.]+)[\s\t]*,[\s\t]*([-+]?[0-9.]+)[\s\t]*$/ s) =>
    (^m (values (clamp-lat (string->number (m 1)))
                (clamp-lng (string->number (m 2)))))]
   [else
    (errorf "Not matched ~a" s)]))

(define (coerce-lat&lng g)
  (match g
    [(? string? s)
     (parse-lat/long s)]
    [((? number? lat) . (? number? lng))
     (values lat lng)]
    [_
     (error "Not a suported geo" g)]))

;;;
;;; # Deprecating API
;;;

;; ## Deprecating interface should use [=hubeny-distance]()
;; e.g. lat/long "36.1030203, 139.40202"
;; -> <number>
(define-method distance-between ((lat/long1 <string>) (lat/long2 <string>))

  (hubeny-distance lat/long1 lat/long2))

;; ## Deprecating interface should use [=hubeny-distance*]()
(define-method distance-between ((lat1 <number>) (long1 <number>)
                                 (lat2 <number>) (long2 <number>))
  (hubeny-distance* lat1 long1 lat2 long2))

;; ## Deprecating interface should use [=hubeny-limit]()
(define-method distance-limit ((d <number>) (lat/long <string>))
  (hubeny-limit d lat/long))

;; ## Deprecating interface should use [=hubeny-limit*]()
(define-method distance-limit ((d <number>) (lat <number>) (long <number>))
  (hubeny-limit* d lat long))

;; ## Deprecating interface should use [=hubeny-lat-limit]()
(define-method latitude-limit ((d <number>) (lat <number>) (_ <number>))
  (hubeny-lat-limit d lat))

;; ## Deprecating interface should use [=hubeny-lng-limit]()
(define-method longitude-limit ((d <number>) (lat <number>) (_ <number>))
  (hubeny-lng-limit d lat))

;; ## Deprecating interface should use [=hubeny-lat-range*]()
(define-method latitude-range ((d <number>) (lat <number>) (long <number>))
  (hubeny-lat-range* d lat long))

;; ## Deprecating interface should use [=hubeny-lng-range*]()
(define-method longitude-range ((d <number>) (lat <number>) (long <number>))
  (hubeny-lng-range* d lat long))

;;;
;;; # API
;;;

;; ## <GEO>
;; <GEO>   ::= <string> | (LAT:<number . LNG:<number>)

;; ##
;; - {GEO1, GEO2} : <GEO>
;;       (e.g. "36.1030203, 139.40202" (36.1030203 . 139.40202))
;; -> <number>
(define (hubeny-distance geo1 geo2)
  (receive (lat1 long1) (coerce-lat&lng geo1)
    (receive (lat2 long2) (coerce-lat&lng geo2)
      (hubeny-distance* lat1 long1 lat2 long2))))

;; ##
;; - {LAT1, LNG1, LAT2, LNG2} : <number>
;; -> <number>
(define (hubeny-distance* lat1 lng1 lat2 lng2)
  (define-values (M Ncos) (compute-ellipse (/ (+ lat1 lat2) 2.0)))

  (define (subtract-lng lng1 lng2)
    (let* ([v (- lng1 lng2)]
           [v* (abs v)])
      (if (< 180 v*)
        (- 360 v*)
        v)))

  (assume-type lat1 <number>)
  (assume-type lng1 <number>)
  (assume-type lat2 <number>)
  (assume-type lng2 <number>)

  (let* ([Dy (degree->radian (- lat1 lat2))]
         [Dx (degree->radian (subtract-lng lng1 lng2))]
         [DyM (* Dy M)]
         [DxNcos (* Dx Ncos)]
         [meter (sqrt (+ (expt DyM 2) (expt DxNcos 2)))])
    meter))

;; Following methods consider to use search range of lat,long set.

;; ## Get latitude METER limit as radian
;; - METER : <number>
;; - LAT/RAD : <real> radian of latitude
;; -> Y-RADIAN:<real>
(define (hubeny-diff-lat meter lat/rad)
  (define-values (M Ncos) (compute-ellipse/rad lat/rad))

  (assume-type meter <number>)
  (assume-type lat/rad <real>)

  (let* ([Dx 0.0]
         [Dy (/ (sqrt (-  (expt meter 2) (expt (* Dx Ncos) 2))) M)])
    Dy))

;; ## Get longitude METER limit as radian
;; **WARN** Need latitude as an argument. Not longitutde.
;; - METER : <number>
;; - LAT/RAD : <real> radian of latitude
;; -> X-RADIAN:<real>
(define (hubeny-diff-lng meter lat/rad)
  (define-values (M Ncos) (compute-ellipse/rad lat/rad))

  (assume-type meter <number>)
  (assume-type lat/rad <real>)

  (let* ([Dy 0.0]
         [Dx (/ (sqrt (- (expt meter 2) (expt (* Dy M) 2))) Ncos)])
    Dx))

;; ## Get latitude METER limit as degree
;; Wrapper of [=hubeny-diff-lat]()
;; -> LATITUDE*:<number>
(define (hubeny-lat-limit meter lat)
  (let* ([lat/rad (degree->radian lat)]
         [lat/rad* (hubeny-diff-lat meter lat/rad)])
    (radian->degree lat/rad*)))

;; ## Get longitude METER limit as degree
;; **WARN** Need latitude as an argument. Not longitutde.
;; Wrapper of [=hubeny-diff-lng]()
;; -> LONGITUDE*:<number>
(define (hubeny-lng-limit meter lat)
  (let* ([lat/rad (degree->radian lat)]
         [lng/rad (hubeny-diff-lng meter lat/rad)])
    (radian->degree lng/rad)))

;; ## Get lat&lng degree difference
;; - METER : <number>
;; - GEO : <GEO>
;; -> [LAT-DEGREE:<number> LNG-DIGREE:<number>]
(define (hubeny-limit meter geo)
  (assume-type meter <number>)
  (assume-type geo <string>)

  (receive (lat _) (coerce-lat&lng geo)
    (hubeny-limit* meter lat)))

;; ## Get lat&lng degree difference
;; See [=hubeny-lat-limit]() and [=hubeny-lng-limit]()
;; - METER : <number>
;; - LAT : <number>
;; - LNG : Deprecating since redundant.
;; -> [LAT-DEGREE:<number> LNG-DIGREE:<number>]
(define (hubeny-limit* meter lat :optional (_lng #f))
  (values (hubeny-lat-limit meter lat)
          (hubeny-lng-limit meter lat)))

;; # *-range API
;;
;; Like [Google Streetview publishapi](https://developers.google.com/streetview/publish/reference/rest/v1/photos/list?hl=ja)
;; use min_latitude, max_latitude, min_longitude, max_longitude as argument.

;; ## Utility to get Min&Max of latitude
;; -> [LAT-MIN:<number> LAT-MAX:<number>]
(define (hubeny-lat-range meter geo)
  (receive (lat lng) (coerce-lat&lng geo)
    (hubeny-lat-range* meter lat lng)))

;; ## Utility to get Min&Max of longitude
;; -> [LNG-MIN:<number> LNG-MAX:<number>]
(define (hubeny-lng-range meter geo)
  (receive (lat lng) (coerce-lat&lng geo)
    (hubeny-lng-range* meter lat lng)))

;; ## Utility to get Min&Max of latitude
;; -> [LAT-MIN:<number> LAT-MAX:<number>]
(define (hubeny-lat-range* meter lat lng)
  (let1 yDegree (hubeny-lat-limit meter lat)
    (values (clamp-lat (- lat yDegree))
            (clamp-lat (+ lat yDegree)))))

;; ## Utility to get Min&Max of longitude
;; -> [LNG-MIN:<number> LNG-MAX:<number>]
(define (hubeny-lng-range* meter lat lng)
  (let1 xDegree (hubeny-lng-limit meter lat)
    (values (clamp-lng (- lng xDegree))
            (clamp-lng (+ lng xDegree)))))

;; ## <RECT-RANGE>
;;
;; <RECT-RANGE>  ::= [LAT-MIN:<number> LAT-MAX:<number> LNG-MIN:<number> LNG-MAX:<number>]

;; ## Inverse of [=hubeny-distance]()
;; Combination of [=hubeny-lat-range]() and [=hubeny-lng-range]()
;; -> <RECT-RANGE>
(define (hubeny-range meter geo)
  (receive (lat lng) (coerce-lat&lng geo)
    (hubeny-range* meter lat lng)))

;; ## Inverse of [=hubeny-distance*]()
;; Combination of [=hubeny-lat-range]() and [=hubeny-lng-range]()
;; NOTE:
;; Distance is calculated in the positive and negative directions of latitude
;; and longitude, respectively. Thus, the distance on the diagonal is
;; approximately (* (sqrt 2) METER), so the coordinates within the rectangle
;; are approximately METER multiplied by 1.0 to 1.4.
;; -> <RECT-RANGE>
(define (hubeny-range* meter lat lng)
  (let-values ([(lat-min lat-max) (hubeny-lat-range* meter lat lng)]
               [(lng-min lng-max) (hubeny-lng-range* meter lat lng)])
    (values lat-min lat-max lng-min lng-max)))

;; ## Utility function combination of [=hubeny-range]() and pred
;; - GEO : <GEO>
;; - METER : <number>
;; - CENTER-GEO : <GEO>
;; -> <boolean>
(define (hubeny-in-rectangle? geo meter center-geo)
  (receive (min-lat max-lat min-lng max-lng)
      (hubeny-range meter center-geo)
    (receive (lat lng) (coerce-lat&lng geo)
      (and (<= min-lat lat max-lat)
           (<= min-lng lng max-lng)))))
